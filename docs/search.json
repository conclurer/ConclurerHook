{"Structs/HookEvent.html#/s:9SwiftHook0B5EventV6Actiona":{"name":"Action","abstract":"<p>The action of a hook.</p>","parent_name":"HookEvent"},"Structs/HookEvent.html#/s:9SwiftHook0B5EventV12ArgumentTypea":{"name":"ArgumentType","abstract":"<p>The type for a closure&rsquo;s arguments.</p>","parent_name":"HookEvent"},"Structs/HookEvent.html#/s:9SwiftHook0B5EventV10ReturnTypea":{"name":"ReturnType","abstract":"<p>The type returned by closures.</p>","parent_name":"HookEvent"},"Structs/HookEvent.html#/s:9SwiftHook0B5EventV11ClosureTypea":{"name":"ClosureType","abstract":"<p>The type closures have to conform.</p>","parent_name":"HookEvent"},"Structs/HookEvent.html#/s:9SwiftHook0B5EventV6actionxvp":{"name":"action","abstract":"<p>The underlying raw value. Should be unique.</p>","parent_name":"HookEvent"},"Structs/HookEvent.html#/s:9SwiftHook0B5EventV6actionACyxq_q0_Gx_tcfc":{"name":"init(action:)","abstract":"<p>Undocumented</p>","parent_name":"HookEvent"},"Structs/HookEvent.html#/s:SH4hash4intoys6HasherVz_tF":{"name":"hash(into:)","parent_name":"HookEvent"},"Structs/HookEvent.html":{"name":"HookEvent","abstract":"<p>Represents a key for hooks. Hook keys are meant to be stored statically with an extension for reuse."},"Protocols/Hook.html#/s:9SwiftHook0B0P6ActionQa":{"name":"Action","abstract":"<p>Undocumented</p>","parent_name":"Hook"},"Protocols/Hook.html#/s:9SwiftHook0B0P7respond2to4withyXlSgAA0B5EventVy6ActionQzqd__qd_0_G_qd_0_qd__ctr0_lF":{"name":"respond(to:with:)","abstract":"<p>Undocumented</p>","parent_name":"Hook"},"Protocols/Hook.html#/s:9SwiftHook0B0P7trigger5event4withSayqd_0_GAA0B5EventVy6ActionQzqd__qd_0_G_qd__tr0_lF":{"name":"trigger(event:with:)","abstract":"<p>Undocumented</p>","parent_name":"Hook"},"Protocols/Hook.html":{"name":"Hook","abstract":"<p>This protocol marks hooks by type. Since there is no way to represent all different types of hooks with one protocol, you need to implement some additional methods. Please compare DelegationHook and SerialHook before implementing your own.</p>"},"Protocols.html#/s:9SwiftHook0B6ActionP":{"name":"HookAction","abstract":"<p>Raw values for hook keys must conform to this protocol.</p>"},"Functions.html#/s:9SwiftHook2eeoiySbAA0B5EventVyxq_q0_G_AEtAA0B6ActionRzr1_lF":{"name":"==(_:_:)","abstract":"<p>Undocumented</p>"},"Classes/SerialHook.html#/s:9SwiftHook06SerialB0C6Actiona":{"name":"Action","abstract":"<p>The type defining valid raw values for keys.</p>","parent_name":"SerialHook"},"Classes/SerialHook.html#/s:9SwiftHook06SerialB0CACyxGycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"SerialHook"},"Classes/SerialHook.html#/s:9SwiftHook06SerialB0C7respond2to4withyXlSgAA0B5EventVyxqd__qd_0_G_qd_0_qd__ctr0_lF":{"name":"respond(to:with:)","abstract":"<p>Adds a closure for the given key.</p>","parent_name":"SerialHook"},"Classes/SerialHook.html#/s:9SwiftHook06SerialB0C7trigger5event4withSayqd_0_GAA0B5EventVyxqd__qd_0_G_qd__tr0_lF":{"name":"trigger(event:with:)","abstract":"<p>Performs all closures for the given key.</p>","parent_name":"SerialHook"},"Classes/DelegationHook.html#/s:9SwiftHook010DelegationB0C6Actiona":{"name":"Action","abstract":"<p>Undocumented</p>","parent_name":"DelegationHook"},"Classes/DelegationHook.html#/s:9SwiftHook010DelegationB0CACyxGycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"DelegationHook"},"Classes/DelegationHook.html#/s:9SwiftHook010DelegationB0C7respond2to4withyXlSgAA0B5EventVyxqd__qd_0_G_qd_0_qd__ctr0_lF":{"name":"respond(to:with:)","abstract":"<p>Adds a closure for the given key.</p>","parent_name":"DelegationHook"},"Classes/DelegationHook.html#/s:9SwiftHook010DelegationB0C7trigger5event4withSayqd_0_GAA0B5EventVyxqd__qd_0_G_qd__tr0_lF":{"name":"trigger(event:with:)","abstract":"<p>Performs all closures for the given key.</p>","parent_name":"DelegationHook"},"Classes/DelegationHook.html":{"name":"DelegationHook","abstract":"<p>Hook with from 0 to 1 closures per hook key. An array of return values will be returned.</p>"},"Classes/SerialHook.html":{"name":"SerialHook","abstract":"<p>This hook accepts many closures and invokes them serial in the current queue.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}